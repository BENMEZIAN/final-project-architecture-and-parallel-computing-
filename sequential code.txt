from time import perf_counter

def smith_waterman(sequence1, sequence2, match_score=2, mismatch_score=-1, gap_penalty=-2)
    m = len(sequence1)
    n = len(sequence2)

    # Initialize the scoring matrix
    score_matrix = [[0]  (n + 1) for _ in range(m + 1)]

    # Initialize the traceback matrix
    traceback_matrix = [[0]  (n + 1) for _ in range(m + 1)]

    max_score = 0
    max_position = (0, 0)    
    
    # Fill the scoring matrix and traceback matrix
    for i in range(1, m + 1)
        for j in range(1, n + 1)
            match = score_matrix[i - 1][j - 1] + (match_score if sequence1[i - 1] == sequence2[j - 1] else mismatch_score)
            delete = score_matrix[i - 1][j] + gap_penalty
            insert = score_matrix[i][j - 1] + gap_penalty
            score_matrix[i][j] = max(0, match, delete, insert)

            # Update the traceback matrix
            if score_matrix[i][j] == 0
                traceback_matrix[i][j] = 0
            elif score_matrix[i][j] == match
                traceback_matrix[i][j] = 1
            elif score_matrix[i][j] == delete
                traceback_matrix[i][j] = 2
            elif score_matrix[i][j] == insert
                traceback_matrix[i][j] = 3

            # Update the maximum score and position
            if score_matrix[i][j]  max_score
                max_score = score_matrix[i][j]
                max_position = (i, j)
                
    # Traceback to find the optimal local alignment
    alignment1 = 
    alignment2 = 
    i, j = max_position
    while i  0 and j  0 and score_matrix[i][j]  0
        if traceback_matrix[i][j] == 1  # Match
            alignment1 = sequence1[i - 1] + alignment1
            alignment2 = sequence2[j - 1] + alignment2
            i -= 1
            j -= 1
        elif traceback_matrix[i][j] == 2  # Delete
            alignment1 = sequence1[i - 1] + alignment1
            alignment2 = '-' + alignment2
            i -= 1
        elif traceback_matrix[i][j] == 3  # Insert
            alignment1 = '-' + alignment1
            alignment2 = sequence2[j - 1] + alignment2
            j -= 1
    
    return alignment1, alignment2, max_score


sequence1 = AGTACGCA
sequence2 = TATGC

alignment1, alignment2, max_score = smith_waterman(sequence1, sequence2)
